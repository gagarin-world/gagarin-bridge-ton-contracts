#include "../imports/stdlib.fc";
#include "../utils.fc";
#include "./op-codes.fc";
#include "./errors.fc";

global int inited?;
global int mint_hash;
global slice bridge;

() load_data() impure {
  var data = get_data().begin_parse();
  inited? = data~load_uint(1);
  mint_hash = data~load_uint(256);
  bridge = data~load_msg_addr();
}

() save_data() impure {
  builder data = begin_cell()
    .store_uint(inited?, 1)
    .store_uint(mint_hash, 256)
    .store_slice(bridge);

  set_data(data.end_cell());
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) {
    return ();
  }

  slice sender = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32);

  if (op == op::mint_record::init) {
    load_data();
    throw_if(err::mint_record::already_inited, inited?);
    throw_unless(err::mint_record::bad_sender, equal_slices(sender, bridge));
    inited? = 1;

    cell msg_body = begin_cell()
      .store_uint(op::mint_record::init | 0x80000000, 32)
      .store_slice(in_msg_body)
      .end_cell();

    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(sender)
      .store_coins(0)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 64);

    save_data();
    return ();
  }

  return ();
}

(int, int, slice) get_stored_data() method_id {
  load_data();
  return (
    inited?,
    mint_hash,
    bridge
  );
}
