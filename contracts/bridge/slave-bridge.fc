#include "../imports/stdlib.fc";
#include "../imports/j-utils.fc";
#include "../utils.fc";
#include "./op-codes.fc";
#include "./errors.fc";

global int state;
global int validator_pubkey;
global int master_bridge;
global slice admin;
global slice j;
global cell jw_code;
global cell mint_record_code;

() load_data() impure {
  var data = get_data().begin_parse();
  state = data~load_uint(4);
  validator_pubkey = data~load_uint(256);
  master_bridge = data~load_uint(160);
  admin = data~load_msg_addr();
  j = data~load_msg_addr();
  jw_code = data~load_ref();
  mint_record_code = data~load_ref();
}

() save_data() impure {
  builder data = begin_cell()
    .store_uint(state, 4)
    .store_uint(validator_pubkey, 256)
    .store_uint(master_bridge, 160)
    .store_slice(admin)
    .store_slice(j)
    .store_ref(jw_code)
    .store_ref(mint_record_code);

  set_data(data.end_cell());
}

() save_data_cell(cell data) impure inline {
  set_data(data);
}

(cell) build_mint_record_initial_data(int mint_hash) impure  {
  return begin_cell()
    .store_uint(0, 1)
    .store_uint(mint_hash, 256)
    .store_slice(my_address())
    .end_cell();
}

(slice) build_mint_record_addr(int mint_hash) impure {
  cell mint_record_initial_data = build_mint_record_initial_data(mint_hash);
  cell mint_record_state_init = build_state_init(mint_record_code, mint_record_initial_data);
  (int wc, int addr_hash) = parse_std_addr(my_address());
  return build_addr(wc, cell_hash(mint_record_state_init));
}

() on_op::bridge::change_data(slice sender, slice in_msg_body) impure {
  throw_unless(err::bridge::bad_sender_admin, equal_slices(admin, sender));
  cell data = in_msg_body~load_ref();
  save_data_cell(data);

  send_change_simple(sender);
  return ();
}

() on_op::bridge::mint(int query_id, slice sender, int msg_value, slice in_msg_body) impure {
  throw_if(err::bridge::stopped, state == 0);
  var mint_sig = in_msg_body~load_bits(512);

  slice mint = in_msg_body~load_ref().begin_parse();
  int mint_hash = slice_hash(mint);

  int mint_id = mint~load_uint(128);
  int mint_master_bridge = mint~load_uint(160);
  int mint_time = mint~load_uint(64);
  int mint_sender = mint~load_uint(160);
  int mint_amount = mint~load_coins();
  slice mint_receiver = mint~load_msg_addr();

  throw_unless(
    err::bridge::bad_signature,
    check_signature(
      mint_hash,
      mint_sig,
      validator_pubkey
    )
  );

  throw_unless(err::bridge::bad_msg_value, msg_value - 100000000 > 200000000);
  throw_unless(err::bridge::bad_master_bridge, master_bridge == mint_master_bridge);

  cell msg_body_op::mint_record::init = begin_cell()
    .store_uint(op::mint_record::init, 32)
    .store_uint(query_id, 64)
    .store_slice(sender)
    .store_ref(begin_cell()
      .store_uint(mint_hash, 256)
      .store_coins(mint_amount)
      .store_slice(mint_receiver)
      .end_cell())
    .end_cell();

  deploy_contract(
    mint_record_code,
    build_mint_record_initial_data(mint_hash),
    0,
    msg_body_op::mint_record::init,
    64
  );

  return ();
}

() on_op::mint_record::init::cb(
  int query_id,
  slice in_msg_body,
  int msg_value,
  slice sender
) impure {
  slice mint = in_msg_body~load_ref().begin_parse();
  int mint_hash = mint~load_uint(256);
  slice mint_record = build_mint_record_addr(mint_hash);
  throw_unless(err::bridge::bad_sender_mint_record, equal_slices(sender, mint_record));

  int mint_amount = mint~load_coins();
  slice mint_receiver = mint~load_msg_addr();
  slice mint_msg_sender = in_msg_body~load_msg_addr();

  cell log_body = begin_cell()
    .store_uint(log::bridge::mint, 32)
    .store_uint(mint_hash, 256)
    .end_cell();

  emit_log_simple(log::bridge::mint, log_body, query_id);

  cell body_j::m = make_body_full_j::m(
    query_id,
    mint_receiver,
    msg_value - 100000000,
    mint_amount,
    j,
    mint_msg_sender
  );

  cell msg = begin_cell()
    .store_uint(0x10, 6)
    .store_slice(j)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(body_j::m)
    .end_cell();

  send_raw_message(msg, 64);

  return ();
}

() on_op::j::t_n(int query_id, slice sender, slice in_msg_body) impure {
  slice my_jw = calc_user_jw(my_address(), j, jw_code);
  throw_unless(err::bridge::bad_sender_jw, equal_slices(my_jw, sender));

  int j_amount = in_msg_body~load_coins();
  slice j_sender = in_msg_body~load_msg_addr();

  if(state == 0) {
    send_j_simple(query_id, j_amount, j_sender, calc_user_jw(my_address(), j, jw_code), 0, 64);
    return ();
  }

  slice payload = in_msg_body~load_ref().begin_parse();
  int payload_op = payload~load_uint(32);

  if (payload_op == op::bridge::burn) {
    int receiver = payload~load_uint(256);

    cell log_body = begin_cell()
      .store_uint(log::bridge::burn, 32)
      .store_coins(j_amount)
      .store_slice(j_sender)
      .store_uint(receiver, 256)
      .end_cell();

    emit_log_simple(log::bridge::burn, log_body, query_id);

    cell msg_body = begin_cell()
      .store_uint(op::j::b(), 32)
      .store_uint(query_id, 64)
      .store_coins(j_amount)
      .store_slice(j_sender)
      .store_int(false, 1)
      .end_cell();

    cell msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(my_jw)
      .store_coins(0)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(msg_body)
      .end_cell();

    send_raw_message(msg, 64);
  }

  return ();
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }

  load_data();
  slice sender = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::bridge::change_data) {
    on_op::bridge::change_data(sender, in_msg_body);
    return ();
  }

  if (op == op::bridge::mint) {
    on_op::bridge::mint(query_id, sender, msg_value, in_msg_body);
    return ();
  }

  if (op == op::j::t_n()) {
    on_op::j::t_n(query_id, sender, in_msg_body);
    return ();
  }

  if (op == op::mint_record::init | 0x80000000) {
    on_op::mint_record::init::cb(query_id, in_msg_body, msg_value, sender);
    return ();
  }

  return ();
}

(int, int, int, slice, slice, cell, cell) get_stored_data() method_id {
  load_data();
  return (
    state,
    validator_pubkey,
    master_bridge,
    admin,
    j,
    jw_code,
    mint_record_code
  );
}

(int) get_mint_hash(slice mint) method_id {
  return slice_hash(mint);
}

(slice) get_mint_record(int mint_hash) method_id {
  load_data();
  return build_mint_record_addr(mint_hash);
}

